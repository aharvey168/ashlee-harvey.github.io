// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  let output = [];
  for (let i of array){
    for(let x of i) {
      output = output.concat(x);
    }
  }
  return output;
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  for (let i = value; test(i); i = update(i)) {
  body(i);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
//every using a loop
  for (let element of array) {
    if(test(element) === false) {
      return false;
    }
  }
return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(str) { //"hello!"
//create variable to point to str
let newStr = str;
//create arrays to store ltr/rtl results
let ltr = [];
let rtl = [];
//iterate through string copy
  for (var i = 0; i < str.length; i++) {
   let scriptName = characterScript(newStr.charCodeAt(i));
  //if scriptName is Not null
    if(scriptName !== null) { //means it s an object
      scriptName.direction === "ltr" ? ltr.push(scriptName.name) : rtl.push(scriptName.name);
    }
  }
  if(ltr.length > rtl.length) {
    return "ltr";
  } else {
    return "rtl";
  }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
